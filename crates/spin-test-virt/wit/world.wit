package fermyon:spin-test-virt;

/// The exports that can be composed with a Spin app creating
/// a virtualized component.
world plug {
    export fermyon:spin/key-value@2.0.0;
    export fermyon:spin/llm@2.0.0;
    export fermyon:spin/redis@2.0.0;
    export fermyon:spin/postgres@2.0.0;
    export fermyon:spin/mqtt@2.0.0;
    export fermyon:spin/mysql@2.0.0;
    export fermyon:spin/sqlite@2.0.0;
    export fermyon:spin/variables@2.0.0;
    export wasi:http/outgoing-handler@0.2.0;
    export set-component-id: func(component-id: string);

    include config;
}

world config {
    export fermyon:spin/key-value@2.0.0;
    export http-handler;
    export key-value-calls;
    export sqlite;
    import get-manifest: func() -> string;
}

interface sqlite {
    use fermyon:spin/sqlite@2.0.0.{value, query-result, error};

    set-response: func(query: string, params: list<value>, response: result<query-result, error>);
}

interface http-handler {
    use wasi:http/types@0.2.0.{future-incoming-response};
    set-response: func(url: string, response: future-incoming-response);
}

interface key-value-calls {
    calls: func() -> list<tuple<string, list<call>>>;

    variant call {
        get(string),
        set(tuple<string, list<u8>>),
        delete(string),
        exists(string),
        get-keys
    }
    
    reset-calls: func();
}
