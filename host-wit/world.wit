package fermyon:spin-test;

/// All the imports supplied to a `spin-test` compliant test
world test-imports {
    import fermyon:spin-test-virt/http-handler;
    import fermyon:spin-test-virt/key-value;
    import fermyon:spin-test-virt/sqlite;
    import fermyon:spin-wasi-virt/environment;
    import wasi:http/incoming-handler@0.2.0;
    import wasi:cli/environment@0.2.0;
    import http-helper;
}

/// A `spin-test` compliant test
world test {
    include test-imports;
    export run: func();
}

/// A test runner that can run a `spin-test` test composition
world runner {
    /// Supply the `spin.toml` manifest
    import get-manifest: func() -> string;
    /// Provided helpers for http that must be supplied by a host
    import http-helper;
    /// Run the test
    export run: func();
}

/// Helpers for overcoming the limitations of `wasi:http@0.2.0`
interface http-helper {
    use wasi:http/types@0.2.0.{
        incoming-request, incoming-response, outgoing-response,
        outgoing-request, response-outparam, future-incoming-response,
        incoming-body
    };
    /// A receiver of an `incoming-response`
    resource response-receiver {
        get: func() -> option<incoming-response>;
    }
    /// Create an `incoming-request` from an `outgoing-request`
    ///
    /// An optional `incoming-body` can also be supplied which will be
    /// used instead of the body of the `outgoing-request`.
    new-request: func(request: outgoing-request, incoming-body: option<incoming-body>) -> incoming-request;
    /// Get a pair of a `response-outparam` and a `response-receiver`
    new-response: func() -> tuple<response-outparam, response-receiver>;
    /// Create a `future-incoming-response` from an `outgoing-response`
    futurize-response: func(response: outgoing-response) -> future-incoming-response;
}