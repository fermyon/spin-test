package fermyon:spin-test-virt;

/// A configurable virtualized environment for Spin apps.
world env {
    include fermyon:spin-wasi-virt/virt;

    // The exports that compose directly with Spin app
    export fermyon:spin/key-value@2.0.0;
    export fermyon:spin/llm@2.0.0;
    export fermyon:spin/redis@2.0.0;
    export fermyon:spin/rdbms-types@2.0.0;
    export fermyon:spin/postgres@2.0.0;
    export fermyon:spin/mqtt@2.0.0;
    export fermyon:spin/mysql@2.0.0;
    export fermyon:spin/sqlite@2.0.0;
    export fermyon:spin/variables@2.0.0;
    export wasi:http/outgoing-handler@0.2.0;

    // Handles for configuring the environment
    export http-handler;
    export key-value;
    export sqlite;

    // Helper functions
    export set-component-id: func(component-id: string);
    import get-manifest: func() -> string;
    use wasi:http/types@0.2.0.{outgoing-response, future-incoming-response};
    import futurize-response: func(response: outgoing-response) -> future-incoming-response;
}

/// Interface for configuring the behavior of the `fermyon:spin/sqlite` interface
interface sqlite {
    use fermyon:spin/sqlite@2.0.0.{value, query-result, error};

    /// Set a response for a given query and set of params
    set-response: func(query: string, params: list<value>, response: result<query-result, error>);
}

/// Interface for configuring the behavior of the `wasi:http/outgoing-handler` interface
interface http-handler {
    use wasi:http/types@0.2.0.{outgoing-response};

    /// Set a response for a given url
    set-response: func(url: string, response: outgoing-response);
}

/// Interface for introspecting the `fermyon:spin/key-value` interface
interface key-value {
    /// An open key-value store
    resource store {
        /// Open the store with the specified label.
        open: static func(label: string) -> store;

        /// Get this stores label
        label: func() -> string;

        /// Get the value associated with the specified `key`
        ///
        /// Returns `ok(none)` if the key does not exist.
        get: func(key: string) -> option<list<u8>>;

        /// Set the `value` associated with the specified `key` overwriting any existing value.
        set: func(key: string, value: list<u8>);

        /// Delete the tuple with the specified `key`
        delete: func(key: string); 
    }

    /// Get the recorded calls to the key-value interface
    calls: func() -> list<tuple<string, list<call>>>;

    /// A call to the key-value interface
    variant call {
        get(string),
        set(tuple<string, list<u8>>),
        delete(string),
        exists(string),
        get-keys
    }
    
    /// Reset the state of the call tracking
    reset-calls: func();
}