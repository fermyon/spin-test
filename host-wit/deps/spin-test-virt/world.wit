package fermyon:spin-test-virt;

/// A configurable virtualized environment for Spin apps.
world env {
    include fermyon:spin-wasi-virt/virt;
    // The exports that compose directly with Spin app
    export fermyon:spin/key-value@2.0.0;
    export fermyon:spin/llm@2.0.0;
    export fermyon:spin/redis@2.0.0;
    export fermyon:spin/rdbms-types@2.0.0;
    export fermyon:spin/postgres@2.0.0;
    export fermyon:spin/mqtt@2.0.0;
    export fermyon:spin/mysql@2.0.0;
    export fermyon:spin/sqlite@2.0.0;
    export fermyon:spin/variables@2.0.0;

    // Handles for configuring the environment
    export key-value;
    export sqlite;
    export variables;

    // Helper functions
    export set-component-id: func(component-id: string);
    import get-manifest: func() -> string;
}

/// Interface for configuring variables
interface variables {
    set: func(key: string, value: string);
}

/// Interface for configuring the behavior of `fermyon:spin/sqlite` interface
interface sqlite {
    use fermyon:spin/sqlite@2.0.0.{value, query-result, error};
  
    resource connection {
      /// Open a connection to a named database instance.
      ///
      /// If `database` is "default", the default instance is opened.
      ///
      /// `error::no-such-database` will be raised if the `name` is not recognized.
      open: static func(database: string) -> result<connection, error>;

      /// Execute a statement returning back data if there is any
      execute: func(statement: string, parameters: list<value>) -> result<query-result, error>;
    }
}


/// Interface for introspecting the `fermyon:spin/key-value` interface
interface key-value {
    /// An open key-value store
    resource store {
        /// Open the store with the specified label.
        open: static func(label: string) -> store;

        /// Get this stores label
        label: func() -> string;

        /// Get the value associated with the specified `key`
        ///
        /// Returns `ok(none)` if the key does not exist.
        get: func(key: string) -> option<list<u8>>;

        /// Set the `value` associated with the specified `key` overwriting any existing value.
        set: func(key: string, value: list<u8>);

        /// Delete the tuple with the specified `key`
        delete: func(key: string); 
    }

    /// Get the recorded calls to the key-value interface
    calls: func() -> list<tuple<string, list<call>>>;

    /// A call to the key-value interface
    variant call {
        get(string),
        set(tuple<string, list<u8>>),
        delete(string),
        exists(string),
        get-keys
    }
    
    /// Reset the state of the call tracking
    reset-calls: func();
}
